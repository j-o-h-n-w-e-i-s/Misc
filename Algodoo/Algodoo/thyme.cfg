/*
Thyme is the homebrew scrpting language in Algodoo/Phun.
There are four atom types in thyme: Int, Float, Bool and String. These types can then be used to construct aggregate types, such as Lists, and Functions.
Identifiers are declared using operator:= and changed using operator=. An identifier is typeless.

foo := 3; // Declares a new identifier "foo" with an initial integer vale
foo = [foo, "hello", true];  // Assigns a list to the previously declared variable 'foo'. The list is heterogenous.
print foo(1); // prints "hello"
print foo([0,2]); // prints [3, true]
isEven := (n)=>{ n%2==0 }; // Declares a function "isEven" that takes one argument and returns true if it's even
*/

/* for - A simple looping structure in Thyme.
Used like this: for(n, (i)=>{ ... }); where n is the number of times to call the function. i will be given the values 0, 1, ..., n-2, n-1
Example:
	for(4, (n)=>{print ((n+1) + " bottles of beer on the wall.")})
Output:
	1 bottles of beer on the wall.
	2 bottles of beer on the wall.
	3 bottles of beer on the wall.
	4 bottles of beer on the wall.
*/
for = (n, what)=>{
    n <= 0 ? false : {
        for(n - 1, what);
        what(n-1)
    }
};

/* if - A simple if structure in Thyme.
Used like this: if(c, { ... }); where c is the condition that needs to be true for the function in {} to be executed
Example:
    if(true, {print "This will be written."});
    if(false, {print "This will be ignored."});
Output:
    This will be written.
*/
if = (c, s)=>{
    c ? {s} : undefined
};

inclusive_range = (min, max)=>{min > max ? [] : {[min] ++ inclusive_range(min + 1, max)}};
infix 5 left: _ .. _ => inclusive_range; // Usage:  1..5 == [1,2,3,4,5]

math.max = (a,b)=>{ a > b ? a : b };
math.min = (a,b)=>{ a < b ? a : b };

// The sum of the components of a real vector
math.sum = (v)=>{
	ret = 0;
	for(string.length(v), (i)=>{
		ret = ret + v(i)
	});
	ret  // Return this
};

// Bench the time it takes to take a few simulation steps.
Bench_Steps = (n)=>{t := System.time; Sim.Step_N(n); Console.print(n + " steps took " + (System.time-t) + " seconds.") };

// Vector library (assumes 2-component vectors)
math.vec = alloc;
math.vec.lenSq  = (v)=>{ (v(0))^2 + (v(1))^2 };
math.vec.len    = (v)=>{ ( (v(0))^2 + (v(1))^2 )^.5 };
math.vec.distSq = (a,b)=>{ math.vec.lenSq(a-b) };
math.vec.dist   = (a,b)=>{ math.vec.len(a-b) };


/*
// Example functionss
spawnBoxRow = (offset, n)=>{for(n, (x)=>{Scene.addBox({pos = offset + [x, 0]})})};
spawnRing = {Scene.addPolygon({surfaces = [makeRing(1, 48), makeRing(0.5, 48)]})};
makeRing = (r, n)=>{
    list = [];
    for(n, (i)=>{
        a = (2 * math.pi * i) / n;
        list = list ++ [r * [cos(a), sin(a)]]
    });
    list  // Return this
};
*/
